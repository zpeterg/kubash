{"version":3,"sources":["Lines.js","kubash/index.js","kubash/content_intro.js","kubash/content_vim.js","Bash.js","App.js","serviceWorker.js","index.js"],"names":["Line","styled","div","_templateObject","HistoryLine","_templateObject2","props","type","ActionLine","_templateObject3","ActionInput","input","_templateObject4","LoginSpan","_templateObject5","VimBarSpan","_templateObject6","ActionSpan","_templateObject7","content","name","say","steps","expect","other","output","displayType","BlackWrap","Bash_templateObject","Bash","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","histories","vimHistories","text","vimBarText","loginText","inputText","handleChange","bind","assertThisInitialized","handleSubmit","callResponse","handleClick","e","target","value","setState","preventDefault","_this$state","length","push","concat","actionInput","focus","_this$state2","console","log","res","toConsumableArray","section","step","currentSectionIndex","findIndex","x","currentSection","currentStep","indexOf","nextStep","nextSection","getResponse","document","getElementById","scrollIntoView","_this2","_this$state3","react_default","a","createElement","onClick","map","hx","i","txt","textI","key","onSubmit","ref","onChange","spellCheck","id","Component","App","className","src_Bash","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5edf3515.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst Line = styled.div`\n  width: 100%;\n`\n\nconst HistoryLine = styled(Line)`\n  color: ${props => (props.type === 'say' ? 'green' : 'white')};\n`\n\nconst ActionLine = styled(Line)`\n  display: grid;\n  grid-template-columns: auto 3fr;\n`\n\nconst ActionInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  border: 0;\n  background-color: inherit;\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  outline: none;\n`\n\nconst LoginSpan = styled.div`\n  margin-right: 0.5em;\n`\n\nconst VimBarSpan = styled.div`\n  margin-right: 0.5em;\n`\n\nconst ActionSpan = styled.div``\n\nexport {\n  ActionSpan,\n  HistoryLine,\n  ActionLine,\n  LoginSpan,\n  ActionInput,\n  VimBarSpan,\n}\n","import content_intro from './content_intro'\nimport content_vim from './content_vim'\n\nconst content = [content_intro, content_vim]\n\nconst getResponse = (text, state) => {\n  if (!state) {\n    console.log('--------------')\n    return {\n      say: [...content[0].say, ...content[0].steps[0].say],\n      state: { section: 'intro', step: 0 },\n      displayType: content[0].steps[0].displayType,\n    }\n  }\n  const currentSectionIndex = content.findIndex(x => x.name === state.section)\n  const currentSection = content[currentSectionIndex]\n  const currentStep = currentSection.steps[state.step]\n  if (currentStep.expect.indexOf(text) >= 0) {\n    const nextStep = currentSection.steps[state.step + 1]\n    // If at end of section\n    if (typeof nextStep === 'undefined') {\n      const nextSection = content[currentSectionIndex + 1]\n      return {\n        say: [...nextSection.say, ...nextSection.steps[0].say],\n        state: { section: nextSection.name, step: 0 },\n        displayType: nextSection.steps[0].displayType,\n      }\n    }\n    // If section there\n    else {\n      return {\n        say: nextStep.say,\n        output: nextStep.output || null,\n        state: { section: currentSection.name, step: state.step + 1 },\n        displayType: nextStep.displayType,\n      }\n    }\n  }\n  // If an unexpected answer\n  else {\n    return {\n      say: currentStep.other,\n      state,\n      displayType: currentStep.displayType,\n    }\n  }\n}\n\nexport { getResponse }\n","export default {\n  name: 'intro',\n  say: ['[Introduction] Welcome to Kubash!'],\n  steps: [\n    {\n      say: [\n        \"Let's get you started!\",\n        'First, a little that you should know:',\n        'Bash is a way of interacting with a computer. Just like you can use a mouse or touch a scream to make things happen, you can also \"talk\" to a computer in Bash',\n        'Computer programmers and people who use computers a lot really like Bash - it lets them do some things faster than using a mouse, and it also lets you do the same things over and over easily by running a list of commands.',\n        \"You'll see as you go!\",\n        'Go ahead and type \"c\" or \"continue\".',\n      ],\n      expect: ['c', 'continue'],\n      other: [\n        'Hmm, it looks like you didn\\'t type \"c\" or \"continue\". Of course, don\\'t type the quotes \"\", just the word. Try again.',\n      ],\n    },\n    {\n      say: [\n        \"Ok, so first, let me describe a little more about what you're looking at in Bash.\",\n        \"First, you're always typing on the last line, and then the lines above show the history of what you have already typed.\",\n        \"Handy, huh? That way you can just scroll up and see what you've already done.\",\n        'To the left below, you\\'ll see \"ubuntu@mycomputer:\".',\n        \"You'll see that wherever you are going to type, and you'll also see it above in things you have typed.\",\n        \"Let's start a new line just by typing Enter.\",\n      ],\n      expect: [''],\n      other: [\n        'It looks like you typed something. Just simply hit the Enter key on your keyboard.',\n      ],\n    },\n    {\n      say: [\n        'Ok, let me explain a little bit about computers that will help you.',\n        'Computers use what\\'s called a \"file system\". The file system is a way of storing and getting files.',\n        'What\\'s a file? I\\'ll show you one. Type \"ls\".',\n      ],\n      expect: ['ls'],\n      other: [\n        'You don\\'t need to type anything except just \"ls\". Without the quotes.',\n      ],\n    },\n    {\n      say: [\n        'And here you go! Look right below and you\\'ll see that you have a file. The file is \"myfile.txt\".',\n        'The part after the period (\"txt\") is called the File Extension. It helps you know that kind of file it is. This file is a text file. That means it\\'s for a person to read.',\n        'There are other kinds of files - like \".js\", which is a JavaScript file for computers to read.',\n        'Type \"c\" to continue.',\n      ],\n      output: ['myfile.txt'],\n      expect: ['c'],\n      other: ['Oops! Just type \"c\" to continue.'],\n    },\n    {\n      say: [\n        \"Well, that's got it for the basic use of bash! You're moving along quick!\",\n        'Next up, you\\'ll learn how to use vim to change documents. Type \"c\" or \"continue\".',\n      ],\n      expect: ['c', 'continue'],\n      other: [\n        'Oop, it seems you don\\'t want to move on. But we\\'ve run out of stuff for you to learn here. So type \"continue\"',\n      ],\n    },\n  ],\n}\n","export default {\n  name: 'vim',\n  say: [\"[Vim] Let's learn about editing a file!\"],\n  steps: [\n    {\n      say: [\n        'Vim is an application that can edit files. Vim is also used with the keyboard.',\n        'To start vim, just type \"vim myfile.txt\"',\n      ],\n      expect: ['vim myfile.txt'],\n      other: [\n        'You didn\\'t type that quite right. Type exactly this: \"vim myfile.txt\".',\n      ],\n    },\n    {\n      say: [\n        'Welcome to vim!',\n        'To Save, just type \":wq\" to quit and write (save) to a file.',\n      ],\n      expect: [':wq'],\n      other: ['You didn\\'t write \":wq\" (without the quotes \"\"). Try again'],\n      displayType: 'vim',\n    },\n    {\n      say: ['Ok, you quit vim.', 'Type \"c\" or \"continue\".'],\n      expect: ['c', 'continue'],\n      other: ['Type a \"c\" or \"continue\" to go on.'],\n    },\n    {\n      say: [\n        \"Let's get you started!\",\n        'First, a little that you should know:',\n        'Bash is a way of interacting with a computer. Just like you can use a mouse or touch a scream to make things happen, you can also \"talk\" to a computer in Bash',\n        'Computer programmers and people who use computers a lot really like Bash - it lets them do some things faster than using a mouse, and it also lets you do the same things over and over easily by running a list of commands.',\n        \"You'll see as you go!\",\n        'Go ahead and type \"c\" or \"continue\".',\n      ],\n      expect: ['c', 'continue'],\n      other: [\n        'Hmm, it looks like you didn\\'t type \"c\" or \"continue\". Of course, don\\'t type the quotes \"\", just the word. Try again.',\n      ],\n    },\n    {\n      say: [\n        \"Ok, so first, let me describe a little more about what you're looking at in Bash.\",\n        \"First, you're always typing on the last line, and then the lines above show the history of what you have already typed.\",\n        \"Handy, huh? That way you can just scroll up and see what you've already done.\",\n        'To the left below, you\\'ll see \"ubuntu@mycomputer:\".',\n        \"You'll see that wherever you are going to type, and you'll also see it above in things you have typed.\",\n        \"Let's start a new line just by typing Enter.\",\n      ],\n      expect: [''],\n      other: [\n        'It looks like you typed something. Just simply hit the Enter key on your keyboard.',\n      ],\n    },\n  ],\n}\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport {\n  ActionSpan,\n  HistoryLine,\n  ActionInput,\n  ActionLine,\n  LoginSpan,\n  VimBarSpan,\n} from './Lines'\nimport { getResponse } from './kubash/index'\n\nconst BlackWrap = styled.div`\n  font-family: 'Courier New', Courier, monospace;\n  color: white;\n  text-align: left;\n  background-color: black;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  line-height: 1.2em;\n`\n\nclass Bash extends Component {\n  constructor() {\n    super()\n    this.state = {\n      histories: [],\n      vimHistories: [\n        {\n          text: ['Here you are in vim!'],\n          type: 'say',\n        },\n      ],\n      vimBarText: '~',\n      loginText: 'ubuntu@mycomputer: ',\n      inputText: '',\n      state: null,\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.callResponse = this.callResponse.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n  }\n  handleChange(e) {\n    const inputText = e.target.value\n    this.setState({\n      inputText,\n    })\n  }\n  handleSubmit(e) {\n    e.preventDefault()\n    const { loginText, inputText, histories, vimHistories } = this.state\n    if (vimHistories.length > 0) {\n      vimHistories.push({\n        text: [inputText],\n        type: 'input',\n      })\n    } else {\n      histories.push({\n        text: [`${loginText} ${inputText}`],\n        type: 'input',\n      })\n    }\n    this.setState({\n      histories,\n    })\n    this.callResponse()\n  }\n  handleClick() {\n    this.actionInput.focus()\n  }\n  callResponse() {\n    const { histories, inputText, state, vimHistories } = this.state\n    console.log('sending', inputText, state)\n    const res = getResponse(inputText, state)\n    console.log('returning', res)\n    if (res.displayType && res.displayType === 'vim') {\n      vimHistories.push({\n        text: res.say,\n        type: 'say',\n      })\n      // If output, add that\n      if (res.output) {\n        vimHistories.push({\n          text: res.output,\n          type: 'output',\n        })\n      }\n      this.setState({\n        vimHistories,\n        inputText: '',\n        state: res.state,\n      })\n    } else {\n      histories.push({\n        text: res.say,\n        type: 'say',\n      })\n      if (res.output) {\n        histories.push({\n          text: res.output,\n          type: 'output',\n        })\n      }\n      this.setState({\n        histories,\n        inputText: '',\n        state: res.state,\n        // Clearn vimhistories in case switching out of vim\n        vimHistories: [],\n      })\n    }\n  }\n  componentDidMount() {\n    this.callResponse()\n    this.actionInput.focus()\n  }\n  componentDidUpdate() {\n    document.getElementById('bottom').scrollIntoView()\n  }\n  render() {\n    const {\n      inputText,\n      vimHistories,\n      vimBarText,\n      histories,\n      loginText,\n    } = this.state\n    console.log('hx:', vimHistories)\n    return (\n      <BlackWrap onClick={this.handleClick}>\n        {vimHistories.length === 0 &&\n          histories.map((hx, i) => {\n            return hx.text.map((txt, textI) => (\n              <HistoryLine key={`${i}-${textI}`} type={hx.type}>\n                {txt}\n              </HistoryLine>\n            ))\n          })}\n        {vimHistories.length > 0 &&\n          vimHistories.map((hx, i) => {\n            return hx.text.map((txt, textI) => (\n              <HistoryLine key={`${i}-${textI}`} type={hx.type}>\n                -{txt}\n              </HistoryLine>\n            ))\n          })}\n        <ActionLine>\n          {vimHistories.length === 0 && <LoginSpan>{loginText}</LoginSpan>}\n          {vimHistories.length > 0 && <VimBarSpan>{vimBarText}</VimBarSpan>}\n          <ActionSpan>\n            <form onSubmit={this.handleSubmit}>\n              <ActionInput\n                ref={input => {\n                  this.actionInput = input\n                }}\n                value={inputText}\n                onChange={this.handleChange}\n                spellCheck=\"false\"\n              />\n            </form>\n          </ActionSpan>\n        </ActionLine>\n        <div id=\"bottom\" />\n      </BlackWrap>\n    )\n  }\n}\n\nexport default Bash\n","import React from 'react'\nimport './App.css'\nimport Bash from './Bash.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Bash />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}